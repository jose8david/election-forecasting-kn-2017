siteHtml2 <- htmlTreeParse(inst.url,useInternalNodes=TRUE)
reg.year <- xpathSApply(siteHtml2,"//a/@href")
reg.year <- reg.year[str_detect(reg.year,institute[1])]
reg.year <- reg.year[str_detect(reg.year,"[0-9]+")]
year.links <- paste("http://www.wahlrecht.de/umfragen/", reg.year,sep="")
year.links[length(year.links)+1] <- paste("http://www.wahlrecht.de/umfragen/",reg[i],sep="")
}
if(i == 7){
year.links <- paste("http://www.wahlrecht.de/umfragen/",reg[i],sep="")
}
list.year <- list()
for(j in 1:length(year.links)){
url.year <- getURL(year.links[j])
siteHtml3 <- htmlTreeParse(url.year,useInternalNodes=TRUE)
names1 <- xpathSApply(siteHtml3,"//thead/tr/th[@class='part']",xmlValue)
names2 <- xpathSApply(siteHtml3,"//thead/tr/th/a",xmlValue)
names1 <- as.character(c(names1,names2[length(names2)]))
tab <- readHTMLTable(url.year)
tab <- data.frame(tab[2])
party.votes <- tab[3:(2+length(names1))]
colnames(party.votes) <- names1
colnames(party.votes) <- str_replace(colnames(party.votes),"Ãœ","Ü")
party <- list()
forecast <- list()
for(k in 1:ncol(party.votes)){
party[[k]] <- rep(colnames(party.votes)[k],nrow(party.votes))
forecast[[k]] <- party.votes[[k]]
}
party <- unlist(party)
forecast <- unlist(forecast)
poll.date <- rep(tab[[1]], ncol(party.votes))
if(any(str_detect(colnames(tab),"[Bb]efrag") == TRUE)){
sample.size <- rep(tab[[which(str_detect(colnames(tab),"[Bb]efrag"))]],ncol(party.votes))}
else{
sample.size <- rep(NA,ncol(party.votes))}
institute <- str_replace(rep(reg[i], length(poll.date)),".htm","")
list.year[[j]] <- data.frame(poll.date,sample.size,institute,party,forecast)
}
list.institutes[[i]] <- do.call("rbind", list.year)
}
df.final <- do.call("rbind", list.institutes)
View(df.final)
wahlrecht_raw <- do.call("rbind", list.institutes)
save(file="data/wahlrecht_raw.RData", list = "wahlrecht_raw")
# tidy data
load("data/wahlrecht_raw.RData")
### Stichprobengröße
sample.size <- str_replace(wahlrecht_raw[[2]], "[.]","") #ist ok das in manchen keine samplesize vorkommt; ist auf Wahlrecht.de nicht immer angegeben
sample.size <- as.numeric(str_extract(sample.size,"[0-9]+"))
### Datum
poll.date <- str_replace_all(wahlrecht_raw[[1]],"[*]","")
test <- str_split(poll.date,"[.]")
year <- sapply(test,function(x)if(length(x)==3){x[[3]]}else{NA}) # this is for the normal date format with day, month, year
year2 <- sapply(test,function(x)if(length(x)==1){str_extract(x[[1]],"[0-9]+")}else{NA}) #gibt kein datum wo nur das Jahr ist?
year3 <- sapply(test,function(x)if(length(x)==2){str_extract(x[[2]],"[0-9]+")}else{NA}) #this is for the date format that is month year, or Wahl 1998
year[is.na(year)] <- year2[is.na(year)]
year[is.na(year)] <- year3[is.na(year)]
year <- as.numeric(year)
#empty fields because of http://www.wahlrecht.de/umfragen/emnid/2004.htm vielleicht den Zeitraum nehmen?
length(which(is.na(year))) #hier sind noch NAs drin; 93 weil u.a. bei emnid manchmal kein genaues Datum angegeben ist http://www.wahlrecht.de/umfragen/emnid/2004.htm
month <- sapply(test,function(x)if(length(x)==3){x[[2]]}else{NA})
month2 <- sapply(test,function(x)if(length(x)==1){str_extract(x[[1]],"Mai")}else{NA})
month3 <- sapply(test,function(x)if(length(x)==2){x[[1]]}else{NA})
month[is.na(month)] <- month2[is.na(month)]
month[is.na(month)] <- month3[is.na(month)]
length(which(is.na(month))) #ebenso
month <- str_replace(month, "Jan","1")
month <- str_replace(month, "Feb","2")
month <- str_replace(month, "Mrz","3")
month <- str_replace(month, "Apr","4")
month <- str_replace(month, "Mai","5")
month <- str_replace(month, "Jun","6")
month <- str_replace(month, "Jul","7")
month <- str_replace(month, "Aug","8")
month <- str_replace(month, "Sep","9")
month <- str_replace(month, "Okt","10")
month <- str_replace(month, "Nov","11")
month <- str_replace(month, "Dez","12")
month <- as.numeric(month)
day <- sapply(test,function(x)if(length(x)==3){x[[1]]}else{NA})
day <- as.numeric(day)
length(which(is.na(day)))
### Partei
party <- str_replace(wahlrecht_raw$party,"Ã¼","ü") #braucht man glaub ich nicht mehr
party[party == "Grüne"] <- "GRÜNE"
party[party == "Linke.PDS"] <- "LINKE"
party[party == "PDS"] <- "LINKE"
party <- as.factor(party)
### Institut
institute <- as.factor(wahlrecht_raw$institute)
### Stimmen#####################
#there are 7 NAs which are also in the original data set; this is because on Wahlrecht.de, there was a "Zur telefonischen Umfrage (CATI) von INSA"
#which the standard scraper could not use; therefore, inserting the missings manually: Maybe scrape the whole table later
#http://www.wahlrecht.de/umfragen/weitere-umfragen.htm#btw-insa-2017-02-02
wahlrecht_raw$forecast <- as.character(wahlrecht_raw$forecast)
wahlrecht_raw$forecast[wahlrecht_raw$poll.date == "02.02.2017" & wahlrecht_raw$institute == "insa" & wahlrecht_raw$party == "CDU/CSU"] <- "33.0"
wahlrecht_raw$forecast[wahlrecht_raw$poll.date == "02.02.2017" & wahlrecht_raw$institute == "insa" & wahlrecht_raw$party == "SPD"] <- "27.0"
wahlrecht_raw$forecast[wahlrecht_raw$poll.date == "02.02.2017" & wahlrecht_raw$institute == "insa" & wahlrecht_raw$party == "GRÜNE"] <- "9.0"
wahlrecht_raw$forecast[wahlrecht_raw$poll.date == "02.02.2017" & wahlrecht_raw$institute == "insa" & wahlrecht_raw$party == "LINKE"] <- "9.0"
wahlrecht_raw$forecast[wahlrecht_raw$poll.date == "02.02.2017" & wahlrecht_raw$institute == "insa" & wahlrecht_raw$party == "FDP"] <- "6.0"
wahlrecht_raw$forecast[wahlrecht_raw$poll.date == "02.02.2017" & wahlrecht_raw$institute == "insa" & wahlrecht_raw$party == "PIRATEN"] <- "?" #not asked
wahlrecht_raw$forecast[wahlrecht_raw$poll.date == "02.02.2017" & wahlrecht_raw$institute == "insa" & wahlrecht_raw$party == "AfD"] <- "12.0"
wahlrecht_raw$forecast[wahlrecht_raw$poll.date == "02.02.2017" & wahlrecht_raw$institute == "insa" & wahlrecht_raw$party == "FW"] <- "?" #not asked
wahlrecht_raw$forecast[wahlrecht_raw$poll.date == "02.02.2017" & wahlrecht_raw$institute == "insa" & wahlrecht_raw$party == "Sonstige"] <- "4.0"
wahlrecht_raw$sample.size[wahlrecht_raw$poll.date == "02.02.2017" & wahlrecht_raw$institute == "insa"] <- "1.003" #add the sample size
wahlrecht_raw$forecast <- as.factor(wahlrecht_raw$forecast)
#now we can extract the forecasts
forecast <- str_replace_all(wahlrecht_raw$forecast, ",",".") #replace , with . ; there are 7 NAs which are also in the original data set
forecast <- str_trim(str_replace(forecast, "%","")) #get rid of the percentages
l <- str_detect(forecast,"[Ss]onst") #only 8 true; this is when it says "PIR 2,2 %Sonst. 4,0 %"
#fc <- forecast[l] evtl. später um AFD zu identfizieren; now the error message disappeared
forecast[l] <- str_extract(forecast[l],"Sonst.+") #extracts the Sonstige XX%
forecast[l] <- str_extract(forecast[l],"[0-9]+.+")
forecast[l] <- str_trim(str_replace(forecast[l],"%",""))
forecast <- as.numeric(forecast) #the NAs are the "–" in the data and the ? (1800 NAs) 1,789 "-" + 1 k. A. + 5 ? ...
length(which(is.na(forecast)))
### Wahlergebnisse
l <- wahlrecht_raw[2] == "Bundestagswahl" #iffer Bundestagswahl bei samplesize (= 285 Mal)
### 1998
bw1998 <- data.frame(x=1:13)
bw1998$party <- party[l & !is.na(wahlrecht_raw[[2]]) & year == 1998] #get the parties of the BTW 1998
bw1998$result <- forecast[l & !is.na(wahlrecht_raw[[2]]) & year == 1998] #get the election results
bw1998$institute <- institute[l & !is.na(wahlrecht_raw[[2]]) & year == 1998] #get the institutes
bw1998_2 <- data.frame(x=1:21)
bw1998_2$party <- party[wahlrecht_raw[[1]]=="Wahl 1998"] #because for some the BTW is in the polldate
bw1998_2$result <- forecast[wahlrecht_raw[[1]]=="Wahl 1998"]
bw1998_2$institute <- institute[wahlrecht_raw[[1]]=="Wahl 1998"]
bw1998 <- list(bw1998,bw1998_2)
bw1998 <- do.call("rbind", bw1998)
### 2002
bw2002 <- data.frame(x=1:49) #why 49 here? length(which(duplicated(bw2005[, -1]))); some doubles?
bw2002$party <- party[l & !is.na(wahlrecht_raw[[2]]) & year == 2002]
bw2002$result <- forecast[l & !is.na(wahlrecht_raw[[2]]) & year == 2002]
bw2002$institute <- institute[l & !is.na(wahlrecht_raw[[2]]) & year == 2002]
### 2005
bw2005 <- data.frame(x=1:54) #before it was 55....why?
bw2005$party <- party[l & !is.na(wahlrecht_raw[[2]]) & year == 2005]
bw2005$result <- forecast[l & !is.na(wahlrecht_raw[[2]]) & year == 2005]
bw2005$institute <- institute[l & !is.na(wahlrecht_raw[[2]]) & year == 2005]
### 2009
bw2009 <- data.frame(x=1:76) #before it was 63?
bw2009$party <- party[l & !is.na(wahlrecht_raw[[2]]) & year == 2009]
bw2009$result <- forecast[l & !is.na(wahlrecht_raw[[2]]) & year == 2009]
bw2009$institute <- institute[l & !is.na(wahlrecht_raw[[2]]) & year == 2009]
### 2013
bw2013 <- data.frame(x=1:93)
bw2013$party <- party[l & !is.na(wahlrecht_raw[[2]]) & year == 2013]
bw2013$result <- forecast[l & !is.na(wahlrecht_raw[[2]]) & year == 2013]
bw2013$institute <- institute[l & !is.na(wahlrecht_raw[[2]]) & year == 2013]
### Genaue Datumsangaben
d <- rep(NA,length(forecast))
date <- as.Date(rep(NA,length(forecast)))
d[!is.na(day)] <- paste(day[!is.na(day)],month[!is.na(day)],year[!is.na(day)],sep="/")
date[!is.na(day)] <- as.Date(d[!is.na(day)],"%d/%m/%Y")
### Zuordnen der Wahlergebnisse für eindeutige Datumsangaben
election <- rep(NA,length(forecast))
actual.votes <- rep(NA,length(forecast))
bws <- list(bw1998,bw2002,bw2005,bw2009, bw2013)
bw.date <- as.Date(c("27/09/1998","22/09/2002", "18/09/2005", "27/09/2009", "22/09/2013"),"%d/%m/%Y")
for(z in 1:5){
for(i in 1:length(levels(institute))){
for(j in 1:length(levels(party))){
if(z == 1){
l <- date < bw.date[z] & institute == levels(institute)[i] & party == levels(party)[j]
}
else{
l <- (date < bw.date[z] & date > bw.date[z-1]) & institute == levels(institute)[i] & party == levels(party)[j]
lfut <- date > bw.date[z]
lfut[is.na(lfut)] <- FALSE
}
l[is.na(l)] <- FALSE
l2 <- bws[[z]]$institute == levels(institute)[i] & bws[[z]]$party == levels(party)[j]
if(length(bws[[z]]$result[l2]) > 0){
actual.votes[l] <- rep(bws[[z]]$result[l2][1], length(l[l]))
election[l] <- rep(as.numeric(format(bw.date[z], "%Y")),length(l[l]))
if(z == 4){
actual.votes[lfut] <- rep("AUSSTEHEND", length(lfut[lfut]))
election[lfut] <- rep(2013,length(lfut[lfut]))
}
}
else{"WARNUNG"}
}
}
}
library(zoo)
### Zuordnen der Wahlergebnisse für nicht-eindeutige Datumsangaben
### Monat - Jahr - Datumsangaben
d2 <- rep(NA,length(forecast))
date2 <- as.Date(rep(NA,length(forecast)))
d2[is.na(day) & !is.na(month)] <- paste(month[is.na(day) & !is.na(month)],year[is.na(day) & !is.na(month)],sep="/")
date2 <- as.yearmon(d2,"%m/%Y")
bw.date <- as.yearmon(c("09/1998","09/2002", "09/2005", "09/2009", "09/2013"),"%m/%Y")
for(z in 1:5){
for(i in 1:length(levels(institute))){
for(j in 1:length(levels(party))){
if(z == 1){
l <- date2 <= bw.date[z] & institute == levels(institute)[i] & party == levels(party)[j]
}
else{
l <- (date2 <= bw.date[z] & date2 > bw.date[z-1]) & institute == levels(institute)[i] & party == levels(party)[j]
lfut <- date2 >= bw.date[z]
lfut[is.na(lfut)] <- FALSE
}
l[is.na(l)] <- FALSE
l2 <- bws[[z]]$institute == levels(institute)[i] & bws[[z]]$party == levels(party)[j]
#if(length(bws[[z]]$result[l2]) == 1 | bws[[z]]$result[l2][1] == bws[[z]]$result[l2][2] & length(bws[[z]]$result[l2]) > 0){
if(length(bws[[z]]$result[l2]) > 0){
actual.votes[l] <- rep(bws[[z]]$result[l2][1], length(l[l]))
election[l] <- rep(as.numeric(format(bw.date[z], "%Y")),length(l[l]))
if(z == 4){
actual.votes[lfut] <- rep("AUSSTEHEND", length(lfut[lfut]))
election[lfut] <- rep(2013,length(lfut[lfut]))
}
}
else{"WARNUNG"}
}
}
}
actual.votes[actual.votes == "AUSSTEHEND"] <- 999
actual.votes <- as.numeric(actual.votes)
df.forecast <- data.frame(actual.votes, election, party, forecast, sample.size, institute, day, year, month,date)
bw.date <- as.Date(c("27/09/1998","22/09/2002", "18/09/2005", "27/09/2009", "22/09/2013"),"%d/%m/%Y")
l <- list()
for(i in 1:length(bw.date)){
l[[i]] <- which(df.forecast$date == bw.date[i])
}
l <- unlist(l)
df.forecast <- df.forecast[-l,]
### AFD
forecast <- str_replace_all(wahlrecht_raw$forecast, ",",".")
forecast <- str_trim(str_replace(forecast, "%",""))
l <- str_detect(forecast,"[Ss]onst")
fc.afd <- forecast[l]
fc.afd <- as.numeric(str_extract(str_extract(fc.afd,"AfD [0-9.]+"),"[0-9.]+")) #Sonstige = Afd?
sample.size.afd <- sample.size[l]
institute.afd <- institute[l]
party.afd <- rep("AFD",length(fc.afd))
actual.votes.afd <- rep(999, length(fc.afd))
election.afd <- rep(2013,length(fc.afd))
day.afd <- day[l]
month.afd <- month[l]
year.afd <- year[l]
date.afd <- as.Date(paste(day.afd,month.afd,year.afd,sep="/"),"%d/%m/%Y")
df.afd <- data.frame(actual.votes.afd, election.afd, party.afd, fc.afd, sample.size.afd, institute.afd, day.afd,year.afd,month.afd,date.afd)
df.afd <- df.afd[!is.na(df.afd$fc.afd),]
### AFD an restlichen Datensatz anhängen
df.forecast$party <- as.character(df.forecast$party)
colnames(df.afd) <- colnames(df.forecast)
data.forecast <- list(df.forecast,df.afd)
data.forecast <- do.call("rbind", data.forecast)
data.forecast$party <- as.factor(data.forecast$party)
View(data.forecast)
wahlrecht_df <- data.forecast
save(wahlrecht_df, file = "wahlrecht_df.RData")
save(wahlrecht_df, file = "data/wahlrecht_df.RData")
load("../Data/polls_comb_results.RData")
load("data/polls_comb_results.RData")
load("data/polls_comb_results.RData")
View(ger_polls_results)
Election <- 2017 # For which election
model_file="polling-model-02-brw-forecast_shock.jags"
nBurn = 100000; nThin=100; nIter=100000
save_var=c("alpha","s","house_effect","forcast")
load("/Users/munzerts/Dropbox/Uni/Research/2017-17 BTW-Vorhersage/modeling/structural_forecasts.RData")
View(jags_oospreds_summary_df)
structural_forcasts <- jags_oospreds_summary_df[jags_oospreds_summary_df$election==Election,]
prior_mean <-   structural_forcasts$mean/100
prior_sigma <- structural_forcasts$sd/100
beta_priors <- t(apply(cbind(prior_mean,prior_sigma),1, function(x) estBetaParams(x[1],x[2]^2)))
source("functions.r")
beta_priors <- t(apply(cbind(prior_mean,prior_sigma),1, function(x) estBetaParams(x[1],x[2]^2)))
rownames(beta_priors) <- structural_forcasts$party
cutoffs <- c(seq(from=165,to=165,by=-(7)))
cutoffs
forcast_df <- data.frame("high" = NULL,  "mid" = NULL,
"low" = NULL,   "party"=NULL, "time"=NULL)
for(cutoff in cutoffs){
# Print
cat("\n Estimating Model for Election", Election, "with a cutoff of ", cutoff, "\n")
# Set time_window of Data
#max_days_to_election <- max(ger_polls_results %>% filter(year == Election) %>%  select(days_to_election))
max_days_to_election <- 365
time_window <- max_days_to_election:cutoff  # How many days before the election should be included?
# parties
parties <- "cdu|spd|fdp|lin|afd|gru|other|oth"
# Prepare Data; filter=year; select=variables; spread to wide format
polls_long <- ger_polls_results %>%
filter(days_to_election %in% time_window) %>%
filter(year==Election) %>%
select(party, support, days_to_election, sample_size, institute) %>%
mutate(t= time_window[1] - days_to_election +1 ) %>%
arrange(desc(days_to_election)) %>%
mutate(iid = match(institute , sort(unique(institute))))
polls <- polls_long %>%
spread(party, support)  %>% # Reshape to wide format
mutate(oth = 100 - rowSums(.[grep(parties, names(.))], na.rm = TRUE)) %>%
mutate(sample_size = replace(sample_size, is.na(sample_size), 1000)) %>%
mutate(afd = replace(afd, is.na(afd), 0)) %>% na.omit()
# Party names that are included in data
party_names <- grep(parties, names(polls),value = T)
# Prepare Data for Jags
Y <- round(as.matrix(polls[,grep(parties, names(polls))]/100) *
polls$sample_size) # Grep existing Parties and transform share to number
NObs <- apply(Y,1,sum)
nParties <-ncol(Y)
forJags <- list(y = Y,
nParties = nParties,
nPeriods =  time_window[1]+1,
nPolls = nrow(Y),
iid = polls$iid,
nInst = max(polls$iid),
date = polls$t,
size = NObs,
beta_priors = beta_priors[party_names,] # Order
)
library(foreign)
library(foreign)
library(lme4)
install.packages("lme4")
library(boot)
library(Hmisc)
install.packages("Hmisc")
library(Hmisc)
load("data/wahlrecht_df.RData")
names(wahlrecht_df)
br
View(wahlrecht_df)
elections <- levels(as.factor(wahlrecht_df$election))
parties <- levels(wahlrecht_df$party)
institutes <- levels(wahlrecht_df$institute)
parties
institutes
elections
load("../data/election_dates.RData")
load("data/election_dates.RData")
load("data/polls/wahlrecht_df.RData")
load("data/wahlrecht_df.RData")
election_date <- ymd(election_date)
wahlrecht_df$date <- ymd(wahlrecht_df$date)
wahlrecht_df$election <- NA
election_periods <- data.frame(first = lag(election_date), last = election_date, year = election_year)
election_periods
election_periods[1,1] <- ymd("1948-01-01")
for (i in 13:length(election_date)){
for(j in 1:length(wahlrecht_df$election)) {
wahlrecht_df$election[j] <- ifelse(between(wahlrecht_df$date[j], election_periods$first[i], election_periods$last[i]), election_periods$year[i], wahlrecht_df$election[j])
}
}
# clean up institute and party variable
wahlrecht_df$institute <- wahlrecht_df$institute %>% str_replace("politbarometer", "fgruppe_wahlen") %>% str_replace("dimap", "infratest_dimap")
wahlrecht_df$party <- recode(wahlrecht_df$party, `AfD` = "afd",
`CDU/CSU` = "cdu",
`FDP` = "fdp",
`LINKE` = "lin",
`FW` = "oth",
`PIRATEN` = "oth",
`Rechte` = "oth",
`REP` = "oth",
`REP/DVU` = "oth",
`Sonstige` = "oth",
`SPD` = "spd"
)
wahlrecht_df$party <- str_replace(wahlrecht_df$party, "GR.+", "gru")
wahlrecht_df <- filter(wahlrecht_df, party != "oth")
wahlrecht_df_wide <- dcast(wahlrecht_df, election + sample.size + institute + date ~ party, value.var = "forecast", mean, na.rm = TRUE)
wahlrecht_df_wide <- wahlrecht_df_wide %>% mutate(oth = 100 - rowSums(.[,c("afd", "cdu", "fdp", "gru", "lin", "spd")], na.rm = TRUE))
wahlrecht_df_long <- melt(wahlrecht_df_wide, measure.vars = c("cdu", "spd", "fdp", "gru", "lin", "afd", "oth"), variable.name = "party", value.name = "support")
wahlrecht_df <- select(wahlrecht_df_long, election = election, sample_size = sample.size, institute = institute, date = date, party = party, support = support)
wahlrecht_df <- filter(wahlrecht_df, !(party == "oth" & support > 50)) # drop unrealistic polls
View(wahlrecht_df)
election_dates_df <- data.frame(election = str_extract(election_date, "[[:digit:]]{4}"), election_date = election_date)
election_dates_df
# generate days to election variable
election_dates_df <- data.frame(election = str_extract(election_date, "[[:digit:]]{4}"), election_date = election_date)
wahlrecht_df <- merge(wahlrecht_df, election_dates_df, by = "election", all.x = TRUE)
wahlrecht_df$days_to_election <- wahlrecht_df$election_date - wahlrecht_df$date
table(wahlrecht_df$institute)
wahlrecht_df[select(wahlrecht_df, institute, date, party) %>% duplicated
select(wahlrecht_df, institute, date, party) %>% duplicated
select(wahlrecht_df, institute, date, party) %>% duplicated %>% table
wahlrecht_df <- wahlrecht_df[select(wahlrecht_df, institute, date, party) %>% duplicated %>% not,]
wahlrecht_df <- filter(wahlrecht_df, !is.na(date))
# delete observations with "sonstige" or "infas" as institute
wahlrecht_df <- filter(wahlrecht_df, institute != "sonstige", institute != "infas")
# delete sparse time series in emnid and forsa data
wahlrecht_df <- filter(wahlrecht_df, !(wahlrecht_df$institute == "emnid" & wahlrecht_df$date < "1998-04-03"))
wahlrecht_df <- filter(wahlrecht_df, !(wahlrecht_df$institute == "forsa" & wahlrecht_df$date < "1993-02-18"))
View(wahlrecht_df)
save(wahlrecht_df, file = "../data/polls/polls_btw.RData")
save(wahlrecht_df, file = "data/polls_btw.RData")
wahlrecht_df_wide <- dcast(wahlrecht_df, institute + date + ... ~ party, value.var = "support")
save(wahlrecht_df_wide, file = "../data/polls/polls_btw_wide.RData")
wahlrecht_df_wide <- dcast(wahlrecht_df, institute + date + ... ~ party, value.var = "support")
save(wahlrecht_df_wide, file = "data/polls_btw_wide.RData")
# export aggregated data for structural model
# select only polls in certain time frames before election
wahlrecht_df_200_230 <- filter(wahlrecht_df, days_to_election >= 200 & days_to_election <= 230) # 200-230 days b.e.
wahlrecht_df_170_200 <- filter(wahlrecht_df, days_to_election >= 170 & days_to_election <= 200) # 170-200 days b.e.
wahlrecht_df_100_130 <- filter(wahlrecht_df, days_to_election >= 100 & days_to_election <= 130) # 100-130 days b.e.
wahlrecht_df_70_100 <- filter(wahlrecht_df, days_to_election >= 70 & days_to_election <= 100) # 70-100 days b.e.
wahlrecht_df_1_30 <- filter(wahlrecht_df, days_to_election >= 1 & days_to_election <= 30) # 1-30 days b.e.
wahlrecht_df_1_8 <- filter(wahlrecht_df, days_to_election >= 1 & days_to_election <= 8) # 1-8 days b.e.
wahlrecht_df_8_15 <- filter(wahlrecht_df, days_to_election >= 8 & days_to_election <= 15)
wahlrecht_df_64_71 <- filter(wahlrecht_df, days_to_election >= 64 & days_to_election <= 71)
wahlrecht_df_92_99 <- filter(wahlrecht_df, days_to_election >= 92 & days_to_election <= 99)
wahlrecht_df_148_155 <- filter(wahlrecht_df, days_to_election >= 148 & days_to_election <= 155)
# aggregate polling variables to election--party level
wahlrecht_df_200_230_group <- group_by(wahlrecht_df_200_230, election, party) %>% summarize(polls_200_230 = mean(support, na.rm = TRUE))
wahlrecht_df_170_200_group <- group_by(wahlrecht_df_170_200, election, party) %>% summarize(polls_170_200 = mean(support, na.rm = TRUE))
wahlrecht_df_100_130_group <- group_by(wahlrecht_df_100_130, election, party) %>% summarize(polls_100_130 = mean(support, na.rm = TRUE))
wahlrecht_df_70_100_group <- group_by(wahlrecht_df_70_100, election, party) %>% summarize(polls_70_100 = mean(support, na.rm = TRUE))
wahlrecht_df_1_30_group <- group_by(wahlrecht_df_1_30, election, party) %>% summarize(polls_1_30 = mean(support, na.rm = TRUE))
wahlrecht_df_1_8_group <- group_by(wahlrecht_df_1_8, election, party) %>% summarize(polls_1_8 = mean(support, na.rm = TRUE))
wahlrecht_df_8_15_group <- group_by(wahlrecht_df_8_15, election, party) %>% summarize(polls_8_15 = mean(support, na.rm = TRUE))
wahlrecht_df_64_71_group <- group_by(wahlrecht_df_64_71, election, party) %>% summarize(polls_64_71 = mean(support, na.rm = TRUE))
wahlrecht_df_92_99_group <- group_by(wahlrecht_df_92_99, election, party) %>% summarize(polls_92_99 = mean(support, na.rm = TRUE))
wahlrecht_df_148_155_group <- group_by(wahlrecht_df_148_155, election, party) %>% summarize(polls_148_155 = mean(support, na.rm = TRUE))
wahlrecht_df_agg <- merge(wahlrecht_df_200_230_group, wahlrecht_df_170_200_group, by = c("election", "party"), all = TRUE)
wahlrecht_df_agg <- merge(wahlrecht_df_agg, wahlrecht_df_100_130_group, by = c("election", "party"), all = TRUE)
wahlrecht_df_agg <- merge(wahlrecht_df_agg, wahlrecht_df_70_100_group, by = c("election", "party"), all = TRUE)
wahlrecht_df_agg <- merge(wahlrecht_df_agg, wahlrecht_df_1_30_group, by = c("election", "party"), all = TRUE)
wahlrecht_df_agg <- merge(wahlrecht_df_agg, wahlrecht_df_1_8_group, by = c("election", "party"), all = TRUE)
wahlrecht_df_agg <- merge(wahlrecht_df_agg, wahlrecht_df_8_15_group, by = c("election", "party"), all = TRUE)
wahlrecht_df_agg <- merge(wahlrecht_df_agg, wahlrecht_df_64_71_group, by = c("election", "party"), all = TRUE)
wahlrecht_df_agg <- merge(wahlrecht_df_agg, wahlrecht_df_92_99_group, by = c("election", "party"), all = TRUE)
wahlrecht_df_agg <- merge(wahlrecht_df_agg, wahlrecht_df_148_155_group, by = c("election", "party"), all = TRUE)
table(wahlrecht_df$election)
load("data/polls_btw.RData")
load("data/polls_btw.RData")
parties <- levels(wahlrecht_df$party)
institutes <- levels(wahlrecht_df$institute)
elections <- levels(as.factor(wahlrecht_df$election))
names(wahlrecht_df)
wahlrecht_df$months_to_election = round(wahlrecht_df$days_to_election/28)
summary(wahlrecht_df$months_to_election)
wahlrecht_df$months_to_election
class(wahlrecht_df$months_to_election)
table(wahlrecht_df$months_to_election)
names(wahlrecht_df)
View(wahlrecht_df)
load("data/wahlrecht_df.RData")
View(wahlrecht_df)
names(wahlrecht.de)
names(wahlrecht_df)
source("packages.r")
source("functions.r")
### import data ----------------------------------------------
load("data/election_dates.RData")
load("data/wahlrecht_df.RData")
# add election year
election_date <- ymd(election_date)
wahlrecht_df$date <- ymd(wahlrecht_df$date)
wahlrecht_df$election <- NA
election_periods <- data.frame(first = lag(election_date), last = election_date, year = election_year)
election_periods[1,1] <- ymd("1948-01-01")
for (i in 13:length(election_date)){
for(j in 1:length(wahlrecht_df$election)) {
wahlrecht_df$election[j] <- ifelse(between(wahlrecht_df$date[j], election_periods$first[i], election_periods$last[i]), election_periods$year[i], wahlrecht_df$election[j])
}
}
# clean up institute and party variable
wahlrecht_df$institute <- wahlrecht_df$institute %>% str_replace("politbarometer", "fgruppe_wahlen") %>% str_replace("dimap", "infratest_dimap")
wahlrecht_df$party <- recode(wahlrecht_df$party, `AfD` = "afd",
`CDU/CSU` = "cdu",
`FDP` = "fdp",
`LINKE` = "lin",
`FW` = "oth",
`PIRATEN` = "oth",
`Rechte` = "oth",
`REP` = "oth",
`REP/DVU` = "oth",
`Sonstige` = "oth",
`SPD` = "spd"
)
wahlrecht_df$party <- str_replace(wahlrecht_df$party, "GR.+", "gru")
wahlrecht_df <- filter(wahlrecht_df, party != "oth")
wahlrecht_df_wide <- dcast(wahlrecht_df, election + sample.size + institute + date + actual.vote ~ party, value.var = "forecast", mean, na.rm = TRUE)
names(wahlrecht_df)
wahlrecht_df_wide <- dcast(wahlrecht_df, election + sample.size + institute + date + actual.votes ~ party, value.var = "forecast", mean, na.rm = TRUE)
wahlrecht_df_wide <- wahlrecht_df_wide %>% mutate(oth = 100 - rowSums(.[,c("afd", "cdu", "fdp", "gru", "lin", "spd")], na.rm = TRUE))
wahlrecht_df_long <- melt(wahlrecht_df_wide, measure.vars = c("cdu", "spd", "fdp", "gru", "lin", "afd", "oth"), variable.name = "party", value.name = "support")
View(wahlrecht_df_long)
wahlrecht_df_wide <- dcast(wahlrecht_df, election + sample.size + institute + date ~ party, value.var = "forecast", mean, na.rm = TRUE)
wahlrecht_df_wide <- wahlrecht_df_wide %>% mutate(oth = 100 - rowSums(.[,c("afd", "cdu", "fdp", "gru", "lin", "spd")], na.rm = TRUE))
wahlrecht_df_long <- melt(wahlrecht_df_wide, measure.vars = c("cdu", "spd", "fdp", "gru", "lin", "afd", "oth"), variable.name = "party", value.name = "support")
View(wahlrecht_df_long)
wahlrecht_df_wide <- dcast(wahlrecht_df, election + sample.size + institute + date + actual.votes ~ party, value.var = "forecast", mean, na.rm = TRUE)
wahlrecht_df_wide <- wahlrecht_df_wide %>% mutate(oth = 100 - rowSums(.[,c("afd", "cdu", "fdp", "gru", "lin", "spd")], na.rm = TRUE))
View(wahlrecht_df_wide)
View(wahlrecht_df)
# load data
load("data/polls_btw.RData")
parties <- levels(wahlrecht_df$party)
institutes <- levels(wahlrecht_df$institute)
elections <- levels(as.factor(wahlrecht_df$election))
names(wahlrecht_df)
View(wahlrecht_df)
load("data/wahlrecht_df.RData")
View(wahlrecht_df)
load("data/polls_btw.RData")
View(wahlrecht_df)
table(wahlrecht_df$election)
load("data/wahlrecht_df.RData")
?unique
names(wahlrecht_df)
election_results_btw <- select(wahlrecht_df, election, party, actual.votes)
election_results_btw <- unique(election_results_btw)
View(election_results_btw)
election_results_btw$party <- recode_partynames(election_results_btw$party)
table(election_results_btw$party)
?recode_partynames
recode_partynames
