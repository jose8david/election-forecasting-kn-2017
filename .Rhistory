# get overview of model performance
sum_tab <- data.frame(model_name = names(lms),
num_vars = sapply(lms, function(x) { x %>% .$coefficients %>% length}) - 1,
#df = sapply(lms, function(x) { summary(x) %>% .$df[2,]}),
r_squared = sapply(lms, function(x) { summary(x) %>% .$r.squared}),
adj_r_squared = sapply(lms, function(x) { summary(x) %>% .$adj.r.squared})
)
sum_tab$ratio <- sum_tab$r_squared / sum_tab$num_vars
View(sum_tab)
# create multiple predictions for 2017
i = 2017
lms_best <- lms[sum_tab$r_squared > .35]
lms_best_predictions <- sapply(lms_best, predict.lm, newdata = filter(ger_df_long, year == i)) %>% t() %>% as.data.frame()
lms_best_predictions <- apply(lms_best_predictions, 1, add, filter(ger_df_long, year == i)$voteshare_l1) %>% t() %>% as.data.frame
names(lms_best_predictions) <- filter(ger_df_long, year == i)$party
summary(lms_best_predictions)
lms_best_predictions$vote_sums <- rowSums(lms_best_predictions)
# summarize predictions
names(lms_best_predictions) <- filter(ger_df_long, year == i)$party
summary(lms_best_predictions)
# check if predictions are (more or less) logically consistent
lms_best_predictions$vote_sums <- rowSums(lms_best_predictions)
summary(lms_best_predictions$vote_sums)
hist(lms_best_predictions$vote_sums)
# get packages and functions
source("packages.r")
source("functions.r")
### ZWEITSTIMME.ORG's FUNDAMENTAL MODEL
### prepare data ---------------------
# import historical data
load("data/ger_model_df.RData")
names(ger_df_long)
table(ger_df_long$party)
View(ger_df_long)
# create election id
election_years <- unique(ger_df_long$year)
election_years_id <- seq_along(election_years)
election_years_df <- data.frame(year = election_years, election_id = election_years_id)
head(election_years_df)
### run models on full sample ---------------------------------------------
model_out <- lm(voteshare ~ chancellor_party + voteshare_l1 + polls_200_230, data = ger_df_long)
summary(model_out)
# evaluate fit
model_out_fit <- augment(model_out)
model_out_fit$party <- ger_df_long$party[as.numeric(model_out_fit$.rownames)]
model_out_fit$year <- ger_df_long$year[as.numeric(model_out_fit$.rownames)]
mean(abs(model_out_fit$.resid)) # mean absolute error
group_by(model_out_fit, party) %>% summarize(mae = mean(abs(.resid))) # mean absolute error, by party
plot(model_out_fit$.fitted, model_out_fit$voteshare, cex = .5, pch = 20)
text(model_out_fit$.fitted, model_out_fit$voteshare, paste0(model_out_fit$party, str_sub(as.character(model_out_fit$year), -2, -1)), pos = 3, offset = .15, cex = .9)
grid()
abline(0, 1)
### 2017 forecast, without and with prediction intervals-------------------
dat_2017 <- filter(ger_df_long, year == 2017)
rownames(dat_2017) <-  dat_2017$party
augment(model_out, newdata = dat_2017)
(predict_conf <- predict(model_out, dat_2017, se.fit = TRUE, interval = "confidence"))
(predict_pred <- predict(model_out, dat_2017, se.fit = TRUE, interval = "prediction"))
# manual computation of standard error used for prediction interval
se_pred <- sqrt(predict_pred$se.fit^2+sum((model_out$residuals^2 / model_out$df.residual))) # see http://stats.stackexchange.com/questions/154247/what-are-the-formulae-used-in-r-by-predict-lm-when-interval-a-none-b-pred
conf_fit <- data.frame(fit = predict_pred$fit[,1],
lwr = predict_pred$fit[,1] + qt(0.025, predict_pred$df) * predict_pred$se.fit,
upr = predict_pred$fit[,1] - qt(0.025, predict_pred$df) * predict_pred$se.fit
)
conf_fit
pred_fit <- data.frame(fit = predict_pred$fit[,1],
lwr = predict_pred$fit[,1] + qt(0.025, predict_pred$df) * se_pred,
upr = predict_pred$fit[,1] - qt(0.025, predict_pred$df) * se_pred
)
pred_fit
# plot forecast
pred_fit$party <-  dat_2017$party
preds_df <- arrange(pred_fit, fit)
preds_df$partyrank <- seq_along(preds_df$party)
preds_df$partyname <- recode_partynames(preds_df$party)
par(mar=c(3.5,7,0,3)+.1)
par(oma=c(0,0,0,0)+.1)
plot(preds_df$fit, preds_df$partyrank, ylim = c(0.5, 7.5), xlim = c(0, 45), xaxt = "n", yaxt = "n", ylab = "", xlab = "", pch = 20)
axis(1, seq(0, 45, 5), seq(0, 45, 5))
axis(1, mean(c(0, 45)), "Forecasted vote share (%)", line = 1, tick = F)
axis(2, preds_df$partyrank, labels = preds_df$partyname, las = 1, tick = F)
axis(4, preds_df$partyrank, labels = paste0(format(preds_df$fit, digits = 2, trim = TRUE),  "%")
, line = 1.5, tick = F,las = 2, hadj = 1)
abline(v = seq(0, 45, 5), col = "darkgrey", lty = 2)
for (i in preds_df$partyrank){
lines(x=c(preds_df$lwr[i],preds_df$upr[i]), y=c(i,i), lwd = 1)
}
### run all possible models -----------------------------------------
ger_df_long$chancellor_partyXunemp_swing <- ger_df_long$chancellor_party*ger_df_long$unemp_swing
ger_df_long$chancellor_partyXvoteshare_l1 <- ger_df_long$chancellor_party*ger_df_long$voteshare_l1
# define set of predictors and outcome
d <- select(ger_df_long, voteshare, chancellor_party, voteshare_l1, voteshare_l1_3, polls_200_230, major, gov, parl, chancellor_partyXunemp_swing, chancellor_partyXvoteshare_l1)
dep_var <- 'voteshare'
indep_vars <- setdiff(names(d), dep_var)
# consideration 1: how to generate set of all possible models?
combn(length(indep_vars), 1) # all models with one predictor
combn(length(indep_vars), 2) # all models with two predictors
combn(length(indep_vars), 3) # all models with three predictors
# ... and so on
# consideration 2: how to build formulas from these models?
which.vars <- combn(length(indep_vars), 3)[,1]
paste(c(dep_var, paste(indep_vars[which.vars], collapse = "+")), collapse = '~')
# consideration 3: how to run all models?
which.formula <- paste(c(dep_var, paste(indep_vars[which.vars], collapse = "+")), collapse = '~')
lm(as.formula(which.formula), data = d)
# run all models
lms <- Reduce(append, lapply(seq_along(indep_vars),
function(num_vars) {
Reduce(append, apply(combn(length(indep_vars), num_vars), 2, function(vars) {
formula_string <- paste(c(dep_var, paste(indep_vars[vars], collapse = "+")), collapse = '~')
structure(list(lm(as.formula(formula_string), data = d)), .Names = formula_string)
}))
}
))
length(lms)
# get overview of model performance
sum_tab <- data.frame(model_name = names(lms),
num_vars = sapply(lms, function(x) { x %>% .$coefficients %>% length}) - 1,
#df = sapply(lms, function(x) { summary(x) %>% .$df[2,]}),
r_squared = sapply(lms, function(x) { summary(x) %>% .$r.squared}),
adj_r_squared = sapply(lms, function(x) { summary(x) %>% .$adj.r.squared})
)
sum_tab$ratio <- sum_tab$r_squared / sum_tab$num_vars
# create multiple predictions for 2017
i = 2017
lms_best <- lms[sum_tab$r_squared > .35]
lms_best_predictions <- sapply(lms_best, predict.lm, newdata = filter(ger_df_long, year == i)) %>% t() %>% as.data.frame()
lms_best_predictions <- apply(lms_best_predictions, 1, add, filter(ger_df_long, year == i)$voteshare_l1) %>% t() %>% as.data.frame
names(lms_best_predictions) <- filter(ger_df_long, year == i)$party
summary(lms_best_predictions)
lms_best_predictions$vote_sums <- rowSums(lms_best_predictions)
View(lms_best_predictions)
View(lms_best)
lms_best
lms_best_predictions <- sapply(lms_best, predict.lm, newdata = filter(ger_df_long, year == i)) %>% t() %>% as.data.frame()
View(lms_best_predictions)
names(lms_best_predictions) <- filter(ger_df_long, year == i)$party
summary(lms_best_predictions)
lms_best_predictions$vote_sums <- rowSums(lms_best_predictions)
names(lms_best_predictions) <- filter(ger_df_long, year == i)$party
summary(lms_best_predictions)
View(lms_best_predictions)
# get overview of model performance
sum_tab <- data.frame(model_name = names(lms),
num_vars = sapply(lms, function(x) { x %>% .$coefficients %>% length}) - 1,
#df = sapply(lms, function(x) { summary(x) %>% .$df[2,]}),
r_squared = sapply(lms, function(x) { summary(x) %>% .$r.squared}),
adj_r_squared = sapply(lms, function(x) { summary(x) %>% .$adj.r.squared})
)
sum_tab$ratio <- sum_tab$r_squared / sum_tab$num_vars
# create multiple predictions for 2017
i = 2017
lms_best <- lms[sum_tab$r_squared > .35]
lms_best_predictions <- sapply(lms_best, predict.lm, newdata = filter(ger_df_long, year == i)) %>% t() %>% as.data.frame()
#lms_best_predictions <- apply(lms_best_predictions, 1, add, filter(ger_df_long, year == i)$voteshare_l1) %>% t() %>% as.data.frame
names(lms_best_predictions) <- filter(ger_df_long, year == i)$party
summary(lms_best_predictions)
# check if predictions are (more or less) logically consistent
lms_best_predictions$vote_sums <- rowSums(lms_best_predictions)
summary(lms_best_predictions$vote_sums)
hist(lms_best_predictions$vote_sums)
vars <- c("voteshare_l1", "chancellor_party", "polls_200_230")
fmla <- as.formula(paste("voteshare ~ ", paste(vars, collapse= "+")))
warnings()
# run out-of-sample predictions
model_out <- list()
model_pred <- list()
for(i in seq_along(election_years)) {
insample <- filter(ger_df_long, year != election_years[i])
outsample <- filter(ger_df_long, year == election_years[i])
model_out[[i]] <- lm(fmla, data = insample)
model_pred[[i]] <- augment(model_out[[i]], newdata = outsample, type.predict = "response")
}
# evaluate fit
model_pred_df <- do.call(rbind, model_pred)
mean(abs(model_pred_df$voteshare - model_pred_df$.fitted), na.rm = TRUE)
group_by(model_pred_df, party) %>% summarize(mae = mean(abs(voteshare - .fitted), na.rm = TRUE))
plot(model_pred_df$.fitted, model_pred_df$voteshare, cex = .5, pch = 20)
text(model_pred_df$.fitted, model_pred_df$voteshare, paste0(model_pred_df$party, str_sub(as.character(model_pred_df$year), -2, -1)), pos = 3, offset = .15, cex = .6)
grid()
abline(0, 1)
model_out <- lm(voteshare ~ chancellor_party + voteshare_l1 + polls_200_230, data = ger_df_long)
voteshare_pred <- predict(model_out, filter(ger_df_long, year == 2017), se.fit = TRUE, interval = "prediction")
voteshare_pred_sim <- replicate(1000, rnorm(rep(1, length(voteshare_pred$fit[,"fit"])), mean = voteshare_pred$fit[,"fit"], sd = sqrt(voteshare_pred$se.fit^2+var(model_out$residuals)))) %>% t() %>% as.data.frame
names(voteshare_pred_sim) <- filter(ger_df_long, year == 2017)$party %>% as.character
plot(density(voteshare_pred_sim$cdu), xlim = c(20, 50))
lines(density(voteshare_pred_sim$spd), col = "red")
prop.table(table(voteshare_pred_sim$cdu > voteshare_pred_sim$spd))
prop.table(table(voteshare_pred_sim$fdp < 5))
prop.table(table(voteshare_pred_sim$gru < 5))
se_pred <- sqrt(voteshare_pred$se.fit^2+sum((model_out$residuals^2 / model_out$df.residual)))
se_pred
voteshare_pred$fit[,"fit"]
voteshare_pred_sim <- replicate(1000, rnorm(rep(1, length(voteshare_pred$fit[,"fit"])), mean = voteshare_pred$fit[,"fit"], sd = se_pred)) %>% t() %>% as.data.frame
warnings()
names(voteshare_pred_sim) <- filter(ger_df_long, year == 2017)$party %>% as.character
plot(density(voteshare_pred_sim$cdu), xlim = c(20, 50))
lines(density(voteshare_pred_sim$spd), col = "red")
prop.table(table(voteshare_pred_sim$cdu > voteshare_pred_sim$spd))
prop.table(table(voteshare_pred_sim$fdp < 5))
prop.table(table(voteshare_pred_sim$gru < 5))
# get packages and functions
source("packages.r")
source("functions.r")
# name assigned to created app
appname <- "TwitterToR"
## api key (example below is not a real key)
load("/Users/munzerts/rkeys.RDa")
key <- TwitterToR_twitterkey
## api secret (example below is not a real key)
secret <- TwitterToR_twittersecret
twitter_token <- create_token(
app = appname,
consumer_key = key,
consumer_secret = secret)
rt <- search_tweets("merkel", n = 200, token = twitter_token)
url <- "https://www.oddschecker.com/politics/european-politics/german-politics/next-chancellor"
url_parsed <- read_html(url)
odds_table <- html_table(url_parsed)[[1]]
odds_table <- slice(odds_table, 7:14)
odds_table
odds_merkel <- odds_table[1,] %>% str_subset("\\d.*")
odds_schulz <- odds_table[2,] %>% str_subset("\\d.*")
odds_merkel <- sapply(odds_merkel, function(x) eval(parse(text = x)))
odds_schulz <- sapply(odds_schulz, function(x) eval(parse(text = x)))
odds_merkel
odds_schulz
odds_table
odds_merkel <- odds_table[1,] %>% str_subset("\\d.*")
odds_schulz <- odds_table[2,] %>% str_subset("\\d.*")
odds_merkel <- sapply(odds_merkel, function(x) eval(parse(text = x)))
odds_schulz <- sapply(odds_schulz, function(x) eval(parse(text = x)))
probs_merkel <- odds.hk2prob(odds_merkel)
probs_schulz <- odds.hk2prob(odds_merkel)
probs_merkel
probs_schulz
# largest party
url <- "https://www.oddschecker.com/politics/european-politics/german-politics/german-federal-election"
url_parsed <- read_html(url)
odds_table <- html_table(url_parsed)[[1]]
odds_table <- slice(odds_table, 7:14)
odds_cdu <- odds_table[1,] %>% str_subset("\\d.*")
odds_spd <- odds_table[2,] %>% str_subset("\\d.*")
# prepare odds
odds_cdu <- sapply(odds_cdu, function(x) eval(parse(text = x)))
odds_spd <- sapply(odds_spd, function(x) eval(parse(text = x)))
probs_cdu <- odds.hk2prob(odds_cdu)
probs_spd <- odds.hk2prob(odds_spd)
probs_cdu
summary(probs_cdu)
summary(probs_merkel)
summary(probs_spd)
summary(probs_schulz)
probs_schulz <- odds.hk2prob(odds_schulz)
summary(probs_spd)
summary(probs_schulz)
source("packages.r")
source("functions.r")
load("./data/election_dates.RData")
election_date
election_year
ger_df <- read_dta("./data/ger_nat.dta")
# corrections of government variables
ger_df$spd_gov[ger_df$year == 1965] <- 1
ger_df$fdp_gov[ger_df$year == 1980] <- 1
ger_df$spd_gov[ger_df$year == 2005] <- 1
# add vote shares for others
ger_df$npd_share <- NULL
ger_df$npd_seats <- NULL
ger_df <- mutate(ger_df, oth_share = 100 - cdsu_share - spd_share - fdp_share - gru_share - lin_share - afd_share)
# make df long
ger_df_long <- select(ger_df, ends_with("_share"), year) %>%
select(-contains("gov_share")) %>%
gather(key = "party", value = "voteshare")
voteshare_vars <- str_subset(names(ger_df), "^(?!.*gov).*_share$")
gov_vars <- str_subset(names(ger_df), "_gov$")
ger_df_long <- melt(ger_df, id.vars = c("year", "turnout", "chancellor", "unemp", "chancellor_polls", "term", gov_vars) , measure.vars = voteshare_vars, value.name = "voteshare")
ger_df_long <- rename(ger_df_long, party = variable)
# gen party id
ger_df_long$party <- str_extract(ger_df_long$party, "[:alpha:]+")
ger_df_long$party <- str_replace(ger_df_long$party, "cdsu", "cdu")
# gen election id
elections_df <- data.frame(year = unique(ger_df_long$year), election = seq_along(unique(ger_df_long$year)))
ger_df_long <- merge(ger_df_long, elections_df, by = c("year"), all.x = TRUE)
# gen lag vars
lag(ger_df_long$voteshare, 1)
ger_df_long <- group_by(ger_df_long, party) %>% arrange(year) %>% mutate(voteshare_l1 = lag(voteshare, 1), voteshare_l2 = lag(voteshare, 2), voteshare_l3 = lag(voteshare, 3), chancellor = lag(chancellor, 1), unemp_l1 = lag(unemp, 1))
# generate swing variable
ger_df_long$swing <- ger_df_long$voteshare - ger_df_long$voteshare_l1
ger_df_long <- group_by(ger_df_long, party) %>% arrange(year) %>% mutate(swing_l1 = lag(swing, 1))
# gen chancellor party indicator
ger_df_long$chancellor_party <- ifelse(ger_df_long$party == ger_df_long$chancellor, 1, 0)
# gen major party indicator
ger_df_long$major <- ifelse(ger_df_long$party == "spd" | ger_df_long$party == "cdu", 1, 0)
# gen government-opposition indicator
ger_df_long <- group_by(ger_df_long, party) %>% arrange(year) %>% mutate(cdsu_gov = lag(cdsu_gov, 1), spd_gov = lag(spd_gov, 1), fdp_gov = lag(fdp_gov, 1), gru_gov = lag(gru_gov, 1))
ger_df_long <- ungroup(ger_df_long)
ger_df_long <- mutate(ger_df_long, gov = ifelse(party == "cdu" & cdsu_gov == 1, 1,
ifelse(party == "spd" & spd_gov == 1, 1,
ifelse(party == "fdp" & fdp_gov == 1, 1,
ifelse(party == "gru" & gru_gov == 1, 1, 0)))))
# gen parliament indicator
ger_df_long$parl <- ifelse(ger_df_long$voteshare_l1 >= 5, 1, 0)
ger_df_long$parl[ger_df_long$party ==  "lin" & ger_df_long$year == 1994] <- 1
ger_df_long$parl[ger_df_long$party ==  "lin" & ger_df_long$year == 1998] <- 1
ger_df_long$parl[ger_df_long$party ==  "lin" & ger_df_long$year == 2002] <- 1
ger_df_long$parl[ger_df_long$party ==  "lin" & ger_df_long$year == 2005] <- 1
# gen unemp swing indicator
ger_df_long$unemp_swing <- ger_df_long$unemp - ger_df_long$unemp_l1
# add ltw swing indicators
ltw_df <- read_dta("./data/election_results_ltw_agg.dta")
ger_df_long <- merge(ger_df_long, ltw_df, by.x = c("year", "party"), by.y = c("election", "party"), all.x = TRUE)
# add polling indicators
load("./data/polls_df_agg.RData")
ger_df_long <- merge(ger_df_long, polls_df_agg, by.x = c("year", "party"), by.y = c("election", "party"), all.x = TRUE)
ger_df_long$polls_70_100[is.na(ger_df_long$polls_70_100)] <- ger_df_long$polls_1_30[is.na(ger_df_long$polls_70_100)] # ad hoc replacement of missing polling data with later polling data
ger_df_long$polls_100_130[is.na(ger_df_long$polls_100_130)] <- ger_df_long$polls_70_100[is.na(ger_df_long$polls_100_130)] # ad hoc replacement of missing polling data with later polling data
ger_df_long$polls_170_200[is.na(ger_df_long$polls_170_200)] <- ger_df_long$polls_100_130[is.na(ger_df_long$polls_170_200)] # ad hoc replacement of missing polling data with later polling data
ger_df_long$polls_200_230[is.na(ger_df_long$polls_200_230)] <- ger_df_long$polls_170_200[is.na(ger_df_long$polls_200_230)] # ad hoc replacement of missing polling data with later polling data
ger_df_long$polls_200_230_swing <- ger_df_long$polls_200_230 - ger_df_long$voteshare_l1
# gen long-term partisanship variable
ger_df_long$voteshare_l1_3 <- rowMeans(select(ger_df_long, voteshare_l1, voteshare_l2, voteshare_l3), na.rm = TRUE)
# drop cases where voteshare variable is 0 (= party effectively does not run)
ger_df_long <- filter(ger_df_long, voteshare != 0 | is.na(voteshare))
View(ger_df_long)
ger_df_sub <- select(ger_df_long, voteshare, voteshare_l1, chancellor_party, polls_200_230)
summary(ger_df_sub)
stargazer(ger_df_sub, title = "Summary statistics", type = "latex", out = "figures/sumstats.tex")
# generate summary table
ger_df_sub <- select(ger_df_long, voteshare, voteshare_l1, chancellor_party, polls_200_230)
summary(ger_df_sub)
stargazer(ger_df_sub, title = "Summary statistics", type = "latex", out = "figures/sumstats.tex")
stargazer(ger_df_sub, title = "Summary statistics", type = "html", out = "figures/sumstats.html")
# generate contingency table
table(ger_df_long$party)
table(ger_df_long$gov, ger_df_long$party)
tab <- table(ger_df_long$gov, ger_df_long$party)
rownames(tab) <- c("Not in government", "In government")
colnames(tab) <- recode_partynames(colnames(tab))
tab <- tab[,c(2, 6, 3, 4, 5, 1)]
tab
# generate contingency table
table(ger_df_long$party)
table(ger_df_long$gov, ger_df_long$party)
tab <- table(ger_df_long$gov, ger_df_long$party)
rownames(tab) <- c("Not in government", "In government")
colnames(tab) <- recode_partynames(colnames(tab))
tab
tab <- tab[,c(2, 6, 3, 4, 5, 1)]
tab
tab <- tab[,c(2, 7, 3, 4, 5, 1, 6)]
# generate contingency table
table(ger_df_long$party)
table(ger_df_long$gov, ger_df_long$party)
tab <- table(ger_df_long$gov, ger_df_long$party)
rownames(tab) <- c("Not in government", "In government")
colnames(tab) <- recode_partynames(colnames(tab))
tab <- tab[,c(2, 7, 3, 4, 5, 1, 6)]
tab
xtab <- xtable(tab, align = c("l", "r","r","r", "r", "r", "r"), digits = 0, caption = "Government status, by party")
xtab <- xtable(tab, align = c("l", "r","r","r", "r", "r", "r", "r"), digits = 0, caption = "Government status, by party")
xtab
print(xtab, booktabs = TRUE, size = "small", caption.placement = "top", table.placement = "t!",  include.colnames = TRUE, include.rownames = TRUE, floating.environment = "table*", file = paste0("figures/tab-party-gov.tex"))
print(xtab, booktabs = TRUE, size = "small", caption.placement = "top", table.placement = "t!",  include.colnames = TRUE, include.rownames = TRUE, floating.environment = "table*", type = "html", file = paste0("figures/tab-party-gov.html"))
## peparations -------------------
source("packages.r")
source("functions.r")
# load data
load("data/polls_btw.RData")
load("data/ger_model_df.RData")
# check polling data
names(wahlrecht_df)
wahlrecht_df$party <- as.character(wahlrecht_df$party)
wahlrecht_df <- filter(wahlrecht_df, party != "afd", date > "1998-01-01")
### prepare data -------------------------------
results <- select(ger_df_long, year, party, voteshare)
names(results) <- c("election", "party", "voteshare")
wahlrecht_df <- merge(wahlrecht_df, results, all.x = TRUE, by = c("election", "party"))
# plot support trend, by party, loess curve
parties <- c("cdu", "spd", "fdp", "gru", "lin")
parties_names <- c("CDU/CSU", "SPD", "FDP", "B'90/Die Grünen", "Die Linke")
parties_cols = c("#0000ff", "#e3000f","#ffed00", "#46962b","#ff0000")
#wahlrecht_df <- filter(wahlrecht_df, party != "afd", date > "2014-01-01")
par(mar=c(2.5,2,2,0)+.1)
par(oma=c(0,0,0,0)+.1)
par(mfrow = c(5, 1))
for (i in seq_along(parties)) {
dat <- filter(wahlrecht_df, party == parties[i])
plot(dat$date, dat$support, col= rgb(0, 0, 0, .5), pch = 20, cex=.5, xaxt = "n", yaxt = "n", xlab = "", ylab = "", main = parties_names[i])
lines(loess.smooth(dat$date, dat$support, span = .2E-2, evaluation = 230), col = parties_cols[i], lwd = 2)
dat_range <- c(min(ymd(wahlrecht_df$date), na.rm = TRUE), max(ymd(wahlrecht_df$date), na.rm = TRUE))
axis(1, seq(dat_range[1], dat_range[2], by = "1 year"), seq(year(dat_range[1]), year(dat_range[2]), 1))
axis(2, seq(0, 60, 2), seq(0, 60, 2))
}
# plot support trend, by party, loess curve
parties <- c("cdu", "spd", "fdp", "gru", "lin")
parties_names <- c("CDU/CSU", "SPD", "FDP", "B'90/Die Grünen", "Die Linke")
parties_cols = c("#0000ff", "#e3000f","#ffed00", "#46962b","#ff0000")
#wahlrecht_df <- filter(wahlrecht_df, party != "afd", date > "2014-01-01")
par(mar=c(2.5,2,2,0)+.1)
par(oma=c(0,0,0,0)+.1)
par(mfrow = c(5, 1))
for (i in seq_along(parties)) {
dat <- filter(wahlrecht_df, party == parties[i])
plot(dat$date, dat$support, col= rgb(0, 0, 0, .5), pch = 20, cex=.5, xaxt = "n", yaxt = "n", xlab = "", ylab = "", main = parties_names[i])
lines(loess.smooth(dat$date, dat$support, span = .2E-2, evaluation = 230), col = parties_cols[i], lwd = 2)
dat_range <- c(min(ymd(wahlrecht_df$date), na.rm = TRUE), max(ymd(wahlrecht_df$date), na.rm = TRUE))
axis(1, seq(dat_range[1], dat_range[2], by = "1 year"), seq(year(dat_range[1]), year(dat_range[2]), 1))
axis(2, seq(0, 60, 2), seq(0, 60, 2))
}
### select lead time ---------------------------
# compute days and months to election
wahlrecht_df$mte = round(wahlrecht_df$days_to_election/30)
table(wahlrecht_df$mte)
# compute absolute forecasting error
wahlrecht_df$afe = abs(wahlrecht_df$support-wahlrecht_df$voteshare)
summary(wahlrecht_df$afe)
# compute monthly average of afe
for (i in unique(wahlrecht_df$mte)) {
wahlrecht_df$mafe[wahlrecht_df$mte == i] <- mean(wahlrecht_df$afe[wahlrecht_df$mte == i], na.rm = T)
}
# compute monthly average of afe, write in vector
mafe.mte <- vector()
for (i in 1:50) {
mafe.mte[i] <- mean(wahlrecht_df$mafe[wahlrecht_df$mte==(i-1)])
}
# plot monthly-level forecasting error
plot(wahlrecht_df$mte, wahlrecht_df$afe, pch=1, col="white", ylim=c(0,20), xlim=c(0,23.5), xlab="", ylab="", yaxt="n", xaxt="n", main="", axes=F)
polygon(x=c(7.5,7.5,9.5,9.5), y=c(0,20,20,0), col=rgb(220,220,220,200, max=255), border=NA)
points(wahlrecht_df$mte, wahlrecht_df$afe, pch=1, col=rgb(170,170,170, max=255))
lines(0:49, mafe.mte, lwd=2)
axis(1, at=seq(0,60,2), labels=seq(0,60,2))
axis(2, at=seq(0,20,5), labels=seq(0,20,5))
mtext("Absolute prediction error", side=2, at=10, line = 2, outer=F)
mtext("Months to election", side=1, at=10, line = 2)
# compute days and months to election
wahlrecht_df$mte = round(wahlrecht_df$days_to_election/30)
table(wahlrecht_df$mte)
# compute absolute forecasting error
wahlrecht_df$afe = abs(wahlrecht_df$support-wahlrecht_df$voteshare)
summary(wahlrecht_df$afe)
# compute monthly average of afe
for (i in unique(wahlrecht_df$mte)) {
wahlrecht_df$mafe[wahlrecht_df$mte == i] <- mean(wahlrecht_df$afe[wahlrecht_df$mte == i], na.rm = T)
}
# compute monthly average of afe, write in vector
mafe.mte <- vector()
for (i in 1:50) {
mafe.mte[i] <- mean(wahlrecht_df$mafe[wahlrecht_df$mte==(i-1)])
}
# plot monthly-level forecasting error
plot(wahlrecht_df$mte, wahlrecht_df$afe, pch=1, col="white", ylim=c(0,20), xlim=c(0,23.5), xlab="", ylab="", yaxt="n", xaxt="n", main="", axes=F)
polygon(x=c(7.5,7.5,9.5,9.5), y=c(0,20,20,0), col=rgb(220,220,220,200, max=255), border=NA)
points(wahlrecht_df$mte, wahlrecht_df$afe, pch=1, col=rgb(170,170,170, max=255))
lines(0:49, mafe.mte, lwd=2)
axis(1, at=seq(0,60,2), labels=seq(0,60,2))
axis(2, at=seq(0,20,5), labels=seq(0,20,5))
mtext("Absolute prediction error", side=2, at=10, line = 2, outer=F)
mtext("Months to election", side=1, at=10, line = 2)
dev.off()
# compute days and months to election
wahlrecht_df$mte = round(wahlrecht_df$days_to_election/30)
table(wahlrecht_df$mte)
# compute absolute forecasting error
wahlrecht_df$afe = abs(wahlrecht_df$support-wahlrecht_df$voteshare)
summary(wahlrecht_df$afe)
# compute monthly average of afe
for (i in unique(wahlrecht_df$mte)) {
wahlrecht_df$mafe[wahlrecht_df$mte == i] <- mean(wahlrecht_df$afe[wahlrecht_df$mte == i], na.rm = T)
}
# compute monthly average of afe, write in vector
mafe.mte <- vector()
for (i in 1:50) {
mafe.mte[i] <- mean(wahlrecht_df$mafe[wahlrecht_df$mte==(i-1)])
}
# plot monthly-level forecasting error
plot(wahlrecht_df$mte, wahlrecht_df$afe, pch=1, col="white", ylim=c(0,20), xlim=c(0,23.5), xlab="", ylab="", yaxt="n", xaxt="n", main="", axes=F)
polygon(x=c(7.5,7.5,9.5,9.5), y=c(0,20,20,0), col=rgb(220,220,220,200, max=255), border=NA)
points(wahlrecht_df$mte, wahlrecht_df$afe, pch=1, col=rgb(170,170,170, max=255))
lines(0:49, mafe.mte, lwd=2)
axis(1, at=seq(0,60,2), labels=seq(0,60,2))
axis(2, at=seq(0,20,5), labels=seq(0,20,5))
mtext("Absolute prediction error", side=2, at=10, line = 2, outer=F)
mtext("Months to election", side=1, at=10, line = 2)
### estimate model ---------------------------
# generate partyXinstitute interaction
wahlrecht_df$partyXinstitute <- interaction(wahlrecht_df$party,wahlrecht_df$institute)
# compute model
data_sub <- filter(wahlrecht_df, mte >= 8, mte <= 9)
model_out <- lmer(voteshare ~ support + (1|party) + (1|partyXinstitute), data = data_sub)
summary(model_out)
# retrieve REs
ranef(model_out)$party
ranef(model_out)$partyXinstitute
# retrieve fitted values
wahlrecht_df$fit <- NA
model_out_fit <- augment(model_out)
wahlrecht_df$fit[as.numeric(model_out_fit$.rownames)] <- model_out_fit$.fitted
### 2017 forecast ---------------------------
# how many polls for forecasting?
length(wahlrecht_df$support[wahlrecht_df$mte >= 8 & wahlrecht_df$mte <= 9 & wahlrecht_df$election == 2017])/6
data_2017 <- filter(wahlrecht_df, mte >= 8, mte <= 9, election == 2017)
nrow(data_2017)/7
pred_2017 <- augment(model_out, newdata = data_2017)
preds_parties <- group_by(pred_2017, party) %>% summarize(forecast = mean(.fitted, na.rm = TRUE))
polls_parties <- group_by(pred_2017, party) %>% summarize(forecast = mean(support, na.rm = TRUE))
preds_parties$forecast %>% sum # afd missing!
preds_parties
plot(preds_parties$forecast, polls_parties$forecast, ylab = "Polling average", xlab = "Model-based forecast")
text(preds_parties$forecast, polls_parties$forecast, polls_parties$party, pos = 3)
abline(0, 1, lty = 2)
grid()
